head	1.56;
access;
symbols
	SHAREWARE2:1.56
	MAXON5:1.55
	MAXON4:1.53
	MAXON3:1.51
	MAXON2:1.46;
locks;
comment	@; @;


1.56
date	96.12.21.23.34.35;	author Rhialto;	state Rel;
branches;
next	1.55;

1.55
date	93.12.30.22.45.10;	author Rhialto;	state Rel;
branches;
next	1.54;

1.54
date	93.06.24.04.56.00;	author Rhialto;	state Exp;
branches;
next	1.53;

1.53
date	92.10.25.02.08.55;	author Rhialto;	state Rel;
branches;
next	1.51;

1.51
date	92.04.17.15.41.30;	author Rhialto;	state Rel;
branches;
next	1.46;

1.46
date	91.10.06.18.25.18;	author Rhialto;	state Rel;
branches;
next	1.42;

1.42
date	91.06.14.00.08.48;	author Rhialto;	state Exp;
branches;
next	;


desc
@Device independent ASSEMBLY source - created from device.c
@


1.56
log
@Add own BeginIO since the new DICE one seems to be buggy.
@
text
@; $Id: device1.a,v 1.55 1993/12/30 22:45:10 Rhialto Rel $
; $Log: device1.a,v $
; Revision 1.55  1993/12/30  22:45:10  Rhialto
; Change return code when loaded from CLI.
; Remove xref _InitTable.
; Freeze for MAXON5.
;
; Revision 1.54  1993/06/24  04:56:00  Rhialto
; Switch to RTF_AUTOINIT, saves a few bytes. DICE 2.07.54R.
;
; Revision 1.53  92/10/25  02:08:55  Rhialto
; Import UNITB_ACTIVE and HANDLE_IO_QUICK.
;
; Revision 1.51  92/04/17  15:41:30  Rhialto
; Freeze for MAXON3.
;
; Revision 1.46  91/10/06  18:25:18  Rhialto
;
; Freeze for MAXON
;
; Revision 1.42  91/06/14  00:08:48  Rhialto
; DICE conversion
;
	    include	"c.i"
;;;;
;
;   Some constants that need to be modified on specific versions

RTPRI	    equ 	0

;;;;
;
; The first executable location. This should return an error in case
; someone tried to run you as a program (instead of loading you as a
; device)

	section text,code

	moveq.l #-1,d0
	rts

;;;;
;
; A romtag structure. Both "exec" and "ramlib" look for this structure to
; discover magic constants about you (such as where to start running you
; from...).
;
	xref	_DevName
	xref	_idString
	xdef	_RomTag
_RomTag:
	dc.w	RTC_MATCHWORD
	dc.l	_RomTag 	; rt_MatchTag
	dc.l	EndCode 	; rt_EndSkip
	dc.b	RTF_AUTOINIT	; rt_Flags
	dc.b	VERSION 	; rt_Version
	dc.b	NT_DEVICE	; rt_Type
	dc.b	RTPRI		; rt_Pri
	dc.l	_DevName	; rt_Name
	dc.l	_idString	; rt_IdString
	dc.l	Init		; rt_Init

	xref	@@Init
Init:
	dc.l	md_SIZEOF	; size of data portion of Device
	dc.l	LibVectors	; pointer to function initialisers
	dc.l	InitTable	; pointer to data initialisers
	dc.l	@@Init		; routine to run (d0: dev ptr, a0: seglist)

	xref	 @@DevOpen,@@DevClose,@@DevExpunge
	xref	 @@DevBeginIO
	xref	 @@DevAbortIO
LibVectors:
	dc.l	@@DevOpen,@@DevClose,@@DevExpunge,LibNull
	dc.l	@@DevBeginIO
	dc.l	@@DevAbortIO
	dc.l	-1

INITBYTE	MACRO	; &offset,&value
		IFLE	(\1)-255        ;If offset <=255
		DC.B	$a0,\1		;use byte offset
		DC.B	\2,0
		MEXIT			;exit early
		ENDC
		DC.B	$e0,0
		DC.W	\1
		DC.B	\2,0
		ENDM

INITWORD	MACRO	; &offset,&value
		IFLE	(\1)-255        ;If offset <=255
		DC.B	$90,\1		;use byte offset
		DC.W	\2
		MEXIT			;exit early
		ENDC
		DC.B	$d0,0
		DC.W	\1
		DC.W	\2
		ENDM

INITLONG	MACRO	; &offset,&value
		IFLE	(\1)-255        ;If offset <=255
		DC.B	$80,\1		;use byte offset
		DC.L	\2
		MEXIT			;exit early
		ENDC
		DC.B	$c0,0
		DC.W	\1
		DC.L	\2
		ENDM

InitTable:
	INITBYTE ln_Type,NT_DEVICE
	INITLONG ln_Name,_DevName
	INITBYTE dev_Flags,LIBF_CHANGED!LIBF_SUMUSED,
	INITWORD dev_Version,VERSION
	INITWORD dev_Revision,REVISION
	INITLONG dev_IdString,_idString
	dc.w	0

;;;;
;
; Here begin the system interface commands. When the user calls
; OpenDevice/CloseDevice/RemDevice, this eventually gets trahslated into
; a call to the following routines (Open/Close/Expunge).  Exec has
; already put our device pointer in A6 for us.	Exec has turned off task
; switching while in these routines (via Forbid/Permit), so we should not
; take too long in them.
;
; These glue routines are not necessary when using the special
; __D0 keywords of DICE. When we do use these, don't forget to make sure
; the C routines expect the arguments on the stack (i.e. __stkargs)

	ifne	0
	xdef	Init
	xref	_Init
Init:				;a0=segment list
	move.l	A0,-(sp)
	jsr	_Init
	addq	#4,sp
	rts

	xdef	DevOpen
	xref	_DevOpen
DevOpen:			;d0=unitnum,d1=flags,a1=ioreq,a6=device
	movem.l D0-D1/A1/A6,-(sp)
	jsr	_DevOpen
	lea	16(sp),sp
	rts

	xdef	DevClose
	xref	_DevClose
DevClose:			;a1=ioreq,a6=device
	movem.l A1/A6,-(sp)
	jsr	_DevClose
	addq	#8,sp
	rts

	xdef	DevExpunge
	xref	_DevExpunge
DevExpunge:			;a6=device
	movem.l A6,-(sp)
	jsr	_DevExpunge
	addq	#4,sp
	rts

	xdef	DevBeginIO
	xref	_DevBeginIO
DevBeginIO:			;a1=ioreq,a6=device
	movem.l A1/A6,-(sp)
	jsr	_DevBeginIO
	addq	#8,sp
	rts

	xdef	DevAbortIO
	xref	_DevAbortIO
DevAbortIO:			;a1=ioreq,a6=device
	movem.l A1/A6,-(sp)
	jsr	_DevAbortIO
	addq	#8,sp
	rts
	endc

LibNull:
	clr.l	d0
	rts

	ifne	HANDLE_IO_QUICK
;;;;
;
;   C interface to the atomic set bit and test old value instruction.
;
;   Called as	BSET_ACTIVE(byte *address).
;
;   Old value of the bit returned all over d0.w

	xdef	_BSET_ACTIVE
	xdef	@@BSET_ACTIVE
_BSET_ACTIVE:
	move.l	4(sp),a0
@@BSET_ACTIVE:
	bset	#UNITB_ACTIVE,(a0)         ; 0 UNITB_ACTIVE
	sne	d0
	rts
	endc	; HANDLE_IO_QUICK

		;   BeginIO(ior)

		section text,code

		xdef	_hyper_BeginIO
		xdef	_BeginIO
		xdef	@@BeginIO

_hyper_BeginIO:
_BeginIO:
		move.l	4(sp),A0
@@BeginIO:
		move.l	A6,-(sp)
		move.l	A0,A1
		move.l	$14(A0),A6   ; io_Device
		jsr	-30(A6)
		move.l	(sp)+,A6
		rts

EndCode
	end
@


1.55
log
@Change return code when loaded from CLI.
Remove xref _InitTable.
Freeze for MAXON5.
@
text
@d1 1
a1 1
; $Id: device1.a,v 1.54 1993/06/24 04:56:00 Rhialto Exp $
d3 5
d206 19
@


1.54
log
@Switch to RTF_AUTOINIT, saves a few bytes. DICE 2.07.54R.
@
text
@d1 1
a1 1
; $Id: device1.a,v 1.53 92/10/25 02:08:55 Rhialto Rel $
d3 3
d34 1
a34 1
	moveq.l #20,d0
a57 1
	xref	_InitTable
@


1.53
log
@Import UNITB_ACTIVE and HANDLE_IO_QUICK.
@
text
@d1 1
a1 1
; $Id: device1.a,v 1.51 92/04/17 15:41:30 Rhialto Rel $
d3 3
a41 1
	xref	@@Init
d44 1
a44 1
	dc.w	$4AFC		; RTC_MATCHWORD
d47 1
a47 1
	dc.b	0		; rt_Flags (no RTF_AUTOINIT)
d49 1
a49 1
	dc.b	3		; rt_Type  NT_DEVICE
d53 60
a112 1
	dc.l	@@Init		; rt_Init
d128 1
a128 1
	xdef	__Init
d130 1
a130 1
__Init: 			;a0=segment list
d136 1
a136 1
	xdef	__DevOpen
d138 1
a138 1
__DevOpen:			;d0=unitnum,d1=flags,a1=ioreq,a6=device
d144 1
a144 1
	xdef	__DevClose
d146 1
a146 1
__DevClose:			;a1=ioreq,a6=device
d152 1
a152 1
	xdef	__DevExpunge
d154 1
a154 1
__DevExpunge:			;a6=device
d160 1
a160 1
	xdef	__DevBeginIO
d162 1
a162 1
__DevBeginIO:			;a1=ioreq,a6=device
d168 1
a168 1
	xdef	__DevAbortIO
d170 1
a170 1
__DevAbortIO:			;a1=ioreq,a6=device
d177 1
a177 3
	xdef	__LibNull
	xref	_LibNull
__LibNull:
a180 2

;#ifdef HANDLE_IO_QUICK
d198 1
a198 1
	endc
@


1.51
log
@Freeze for MAXON3.
@
text
@d1 1
a1 1
; $Id: device1.a,v 1.46 91/10/06 18:25:18 Rhialto Rel $
d3 3
d124 1
a124 1
	ifne	0
d138 1
a138 1
	bset	#0,(a0)         ; UNITB_ACTIVE
@


1.46
log
@
Freeze for MAXON
@
text
@d1 6
a6 2
; $Id: device1.a,v 1.42 91/06/14 00:08:48 Rhialto Exp $
; $Log:	device1.a,v $
d9 2
a10 1
; 
a14 1
VERSION     equ 	34
d36 1
d48 1
a48 1
	dc.l	_Init		; rt_Init
d58 4
d63 7
a69 6
	xdef	_Init
	xref	_CInit
_Init:				;a0=segment list
	movem.l D2-D3/A0/A6,-(sp)
	jsr	_CInit
	movem.l (sp)+,D2-D3/A0/A6
d75 1
a75 1
	movem.l D0-D3/A1/A6,-(sp)
d77 1
a77 1
	movem.l (sp)+,D0-D3/A1/A6
d83 1
a83 1
	movem.l D2-D3/A1/A6,-(sp)
d85 1
a85 1
	movem.l (sp)+,D2-D3/A1/A6
d91 1
a91 1
	movem.l D2-D3/A6,-(sp)
d93 1
a93 7
	movem.l (sp)+,D2-D3/A6
	rts

	xdef	__LibNull
	xref	_LibNull
__LibNull:
	clr.l	d0
d99 1
a99 1
	movem.l D2-D3/A1/A6,-(sp)
d101 1
a101 1
	movem.l (sp)+,D2-D3/A1/A6
d107 1
a107 1
	movem.l D2-D3/A1/A6,-(sp)
d109 8
a116 1
	movem.l (sp)+,D2-D3/A1/A6
d121 1
d131 1
d134 1
d138 1
@


1.42
log
@DICE conversion
@
text
@d1 5
a5 2
; $Id$
; $Log$
@
