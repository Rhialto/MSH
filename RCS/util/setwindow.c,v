head	1.55;
access;
symbols
	SHAREWARE2:1.55
	MAXON5:1.55
	MAXON4:1.53;
locks;
comment	@ * @;


1.55
date	93.12.30.23.28.00;	author Rhialto;	state Rel;
branches;
next	1.54;

1.54
date	93.06.24.05.35.45;	author Rhialto;	state Exp;
branches;
next	1.53;

1.53
date	92.10.25.02.46.35;	author Rhialto;	state Rel;
branches;
next	;


desc
@Generated source file for the MSH-Set utility.
@


1.55
log
@Freeze for MAXON5.
New GadToolBox (2.0c), and use font-sensitive option.
@
text
@/*
 *  Source machine generated by GadToolsBox V2.0b
 *  which is (c) Copyright 1991-1993 Jaba Development
 *
 *  GUI Designed by : Olaf Seibert
 */

#include <exec/types.h>
#include <intuition/intuition.h>
#include <intuition/classes.h>
#include <intuition/classusr.h>
#include <intuition/imageclass.h>
#include <intuition/gadgetclass.h>
#include <libraries/gadtools.h>
#include <graphics/displayinfo.h>
#include <graphics/gfxbase.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/graphics_protos.h>
#include <clib/utility_protos.h>
#include <string.h>
#include "setwindow.h"

struct Screen	      *Scr = NULL;
UBYTE		      *PubScreenName = NULL;
APTR		       VisualInfo = NULL;
struct Window	      *MSHSettingsWnd = NULL;
struct Gadget	      *MSHSettingsGList = NULL;
struct Menu	      *MSHSettingsMenus = NULL;
UWORD		       MSHSettingsZoom[4];
struct Gadget	      *MSHSettingsGadgets[8];
UWORD		       MSHSettingsLeft = 10;
UWORD		       MSHSettingsTop = 14;
UWORD		       MSHSettingsWidth = 447;
UWORD		       MSHSettingsHeight = 92;
UBYTE		      *MSHSettingsWdt = (UBYTE *)"MSH Settings";
struct TextAttr       *Font, Attr;
UWORD		       FontX, FontY;
UWORD		       OffX, OffY;

UBYTE *CONVERSION0Labels[] = {
	(UBYTE *)"None",
	(UBYTE *)"A: PC Ascii",
	(UBYTE *)"B: ST Ascii",
	NULL };

struct NewMenu MSHSettingsNewMenu[] = {
	NM_TITLE, (STRPTR)"Project", NULL, 0, NULL, NULL,
	NM_ITEM, (STRPTR)"Hide", (STRPTR)"H", NM_ITEMDISABLED, 0L, NULL,
	NM_ITEM, (STRPTR)"Quit", (STRPTR)"Q", 0, 0L, NULL,
	NM_END, NULL, NULL, 0, 0L, NULL };

UWORD MSHSettingsGTypes[] = {
	CHECKBOX_KIND,
	CHECKBOX_KIND,
	CHECKBOX_KIND,
	CHECKBOX_KIND,
	CHECKBOX_KIND,
	CYCLE_KIND,
	BUTTON_KIND,
	LISTVIEW_KIND
};

struct NewGadget MSHSettingsNGad[] = {
	206, 19, 26, 11, (UBYTE *)"Check JUMP in bootblock", NULL, GD_BOOTJMP, PLACETEXT_RIGHT, NULL, NULL,
	206, 5, 26, 11, (UBYTE *)"40 track mode", NULL, GD_MD40TRACK, PLACETEXT_RIGHT, NULL, NULL,
	222, 47, 26, 11, (UBYTE *)"Check bootblock sanity", NULL, GD_SANITY, PLACETEXT_RIGHT, NULL, NULL,
	238, 61, 26, 11, (UBYTE *)"Not sane -> defaults", NULL, GD_SAN_DEFAULT, PLACETEXT_RIGHT, NULL, NULL,
	206, 33, 26, 11, (UBYTE *)"Always default bootblock", NULL, GD_USE_DEFAULT, PLACETEXT_RIGHT, NULL, NULL,
	33, 75, 121, 12, (UBYTE *)"Default conversion", NULL, GD_CONVERSION, PLACETEXT_ABOVE, NULL, NULL,
	171, 75, 57, 12, (UBYTE *)"Load", NULL, GD_LOAD, PLACETEXT_IN, NULL, NULL,
	16, 19, 158, 40, (UBYTE *)"Available handlers", NULL, GD_HANDLERS, PLACETEXT_ABOVE, NULL, NULL
};

ULONG MSHSettingsGTags[] = {
	(GTCB_Checked), TRUE, (TAG_DONE),
	(TAG_DONE),
	(GTCB_Checked), TRUE, (TAG_DONE),
	(GTCB_Checked), TRUE, (TAG_DONE),
	(TAG_DONE),
	(GTCY_Labels), (ULONG)&CONVERSION0Labels[ 0 ], (TAG_DONE),
	(TAG_DONE),
	(GTLV_ShowSelected), NULL, (TAG_DONE)
};

static UWORD ComputeX( UWORD value )
{
	return(( UWORD )((( FontX * value ) + 4 ) / 8 ));
}

static UWORD ComputeY( UWORD value )
{
	return(( UWORD )((( FontY * value ) + 4 ) / 8 ));
}

static void ComputeFont( UWORD width, UWORD height )
{
	Font = &Attr;
	Font->ta_Name = (STRPTR)Scr->RastPort.Font->tf_Message.mn_Node.ln_Name;
	Font->ta_YSize = FontY = Scr->RastPort.Font->tf_YSize;
	FontX = Scr->RastPort.Font->tf_XSize;

	OffX = Scr->WBorLeft;
	OffY = Scr->RastPort.TxHeight + Scr->WBorTop + 1;

	if ( width && height ) {
		if (( ComputeX( width ) + OffX + Scr->WBorRight ) > Scr->Width )
			goto UseTopaz;
		if (( ComputeY( height ) + OffY + Scr->WBorBottom ) > Scr->Height )
			goto UseTopaz;
	}
	return;

UseTopaz:
	Font->ta_Name = (STRPTR)"topaz.font";
	FontX = FontY = Font->ta_YSize = 8;
}

int SetupScreen( void )
{
	if ( ! ( Scr = LockPubScreen( PubScreenName )))
		return( 1L );

	ComputeFont( 0, 0 );

	if ( ! ( VisualInfo = GetVisualInfo( Scr, TAG_DONE )))
		return( 2L );

	return( 0L );
}

void CloseDownScreen( void )
{
	if ( VisualInfo ) {
		FreeVisualInfo( VisualInfo );
		VisualInfo = NULL;
	}

	if ( Scr        ) {
		UnlockPubScreen( NULL, Scr );
		Scr = NULL;
	}
}

int OpenMSHSettingsWindow( void )
{
	struct NewGadget	ng;
	struct Gadget	*g;
	UWORD		lc, tc;
	UWORD		wleft = MSHSettingsLeft, wtop = MSHSettingsTop, ww, wh;

	ComputeFont( MSHSettingsWidth, MSHSettingsHeight );

	ww = ComputeX( MSHSettingsWidth );
	wh = ComputeY( MSHSettingsHeight );

	if (( wleft + ww + OffX + Scr->WBorRight ) > Scr->Width ) wleft = Scr->Width - ww;
	if (( wtop + wh + OffY + Scr->WBorBottom ) > Scr->Height ) wtop = Scr->Height - wh;

	if ( ! ( g = CreateContext( &MSHSettingsGList )))
		return( 1L );

	for( lc = 0, tc = 0; lc < MSHSettings_CNT; lc++ ) {

		CopyMem((char * )&MSHSettingsNGad[ lc ], (char * )&ng, (long)sizeof( struct NewGadget ));

		ng.ng_VisualInfo = VisualInfo;
		ng.ng_TextAttr	 = Font;
		ng.ng_LeftEdge	 = OffX + ComputeX( ng.ng_LeftEdge );
		ng.ng_TopEdge	 = OffY + ComputeY( ng.ng_TopEdge );
		ng.ng_Width	 = ComputeX( ng.ng_Width );
		ng.ng_Height	 = ComputeY( ng.ng_Height);

		MSHSettingsGadgets[ lc ] = g = CreateGadgetA((ULONG)MSHSettingsGTypes[ lc ], g, &ng, ( struct TagItem * )&MSHSettingsGTags[ tc ] );

		while( MSHSettingsGTags[ tc ] ) tc += 2;
		tc++;

		if ( NOT g )
			return( 2L );
	}

	if ( ! ( MSHSettingsMenus = CreateMenus( MSHSettingsNewMenu, GTMN_FrontPen, 0L, TAG_DONE )))
		return( 3L );

	LayoutMenus( MSHSettingsMenus, VisualInfo, TAG_DONE );

	MSHSettingsZoom[0] = MSHSettingsLeft;
	MSHSettingsZoom[1] = MSHSettingsTop;
	if ( MSHSettingsWdt )
		MSHSettingsZoom[2] = TextLength( &Scr->RastPort, (UBYTE *)MSHSettingsWdt, strlen((char *)MSHSettingsWdt )) + 80;
	else
		MSHSettingsZoom[2]  = 80L;
		MSHSettingsZoom[3] = Scr->WBorTop + Scr->RastPort.TxHeight + 1;

	if ( ! ( MSHSettingsWnd = OpenWindowTags( NULL,
				WA_Left,	wleft,
				WA_Top, 	wtop,
				WA_Width,	ww + OffX + Scr->WBorRight,
				WA_Height,	wh + OffY + Scr->WBorBottom,
				WA_IDCMP,	CHECKBOXIDCMP|CYCLEIDCMP|BUTTONIDCMP|LISTVIEWIDCMP|IDCMP_MENUPICK|IDCMP_CLOSEWINDOW|IDCMP_DISKINSERTED|IDCMP_DISKREMOVED|IDCMP_REFRESHWINDOW,
				WA_Flags,	WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH|WFLG_ACTIVATE,
				WA_Gadgets,	MSHSettingsGList,
				WA_Title,	MSHSettingsWdt,
				WA_ScreenTitle, "MSH Settings",
				WA_PubScreen,	Scr,
				WA_Zoom,	MSHSettingsZoom,
				WA_AutoAdjust,	TRUE,
				TAG_DONE )))
	return( 4L );

	SetMenuStrip( MSHSettingsWnd, MSHSettingsMenus );
	GT_RefreshWindow( MSHSettingsWnd, NULL );

	return( 0L );
}

void CloseMSHSettingsWindow( void )
{
	if ( MSHSettingsMenus      ) {
		ClearMenuStrip( MSHSettingsWnd );
		FreeMenus( MSHSettingsMenus );
		MSHSettingsMenus = NULL;	}

	if ( MSHSettingsWnd        ) {
		CloseWindow( MSHSettingsWnd );
		MSHSettingsWnd = NULL;
	}

	if ( MSHSettingsGList      ) {
		FreeGadgets( MSHSettingsGList );
		MSHSettingsGList = NULL;
	}
}

@


1.54
log
@DICE 2.07.54R.
@
text
@d2 4
a5 2
 *  Source generated with GadToolsBox V1.3
 *  which is (c) Copyright 1991,92 Jaba Development
d21 1
a22 1

d25 22
a46 21
struct Screen	     *Scr = NULL;
APTR		      VisualInfo = NULL;
struct Window	     *MSHSettingsWnd = NULL;
struct Gadget	     *MSHSettingsGList = NULL;
struct Menu	     *MSHSettingsMenus = NULL;
UWORD		      MSHSettingsZoom[4];
struct Gadget	     *MSHSettingsGadgets[8];
UWORD		      MSHSettingsLeft = 10;
UWORD		      MSHSettingsTop = 14;
UWORD		      MSHSettingsWidth = 447;
UWORD		      MSHSettingsHeight = 92;
UBYTE		     *MSHSettingsWdt = (UBYTE *)"MSH Settings";

UBYTE	      *CONVERSION0Labels[] = {
    (UBYTE *)"None",
    (UBYTE *)"A: PC Ascii",
    (UBYTE *)"B: ST Ascii",
    NULL };

struct TextAttr topaz8 = {
    ( STRPTR )"topaz.font", 8, 0x00, 0x01 };
d49 37
a85 4
    NM_TITLE, (STRPTR)"Project", NULL, 0, 0L, NULL,
    NM_ITEM, (STRPTR)"Hide", (STRPTR)"H", NM_ITEMDISABLED, 0L, NULL,
    NM_ITEM, (STRPTR)"Quit", (STRPTR)"Q", 0, 0L, NULL,
    NM_END, NULL, NULL, 0, 0L, NULL };
d87 1
a87 1
int SetupScreen( void )
d89 2
a90 2
    if ( ! ( Scr = LockPubScreen( NULL )))
	return( 1L );
d92 3
a94 4
    if ( ! ( VisualInfo = GetVisualInfo( Scr, TAG_DONE )))
	return( 2L );

    return( 0L );
d97 1
a97 1
void CloseDownScreen( void )
d99 19
a117 9
    if ( VisualInfo ) {
	FreeVisualInfo( VisualInfo );
	VisualInfo = NULL;
    }

    if ( Scr        ) {
	UnlockPubScreen( NULL, Scr );
	Scr = NULL;
    }
d120 1
a120 1
int OpenMSHSettingsWindow( void )
d122 2
a123 3
    struct NewGadget	 ng;
    struct Gadget	*g;
    UWORD		offx, offy;
d125 1
a125 2
    offx = Scr->WBorLeft;
    offy = Scr->WBorTop + Scr->RastPort.TxHeight + 1;
d127 2
a128 2
    if ( ! ( g = CreateContext( &MSHSettingsGList )))
	return( 1L );
d130 2
a131 9
    ng.ng_LeftEdge	  =    offx + 206;
    ng.ng_TopEdge	  =    offy + 18;
    ng.ng_Width 	  =    26;
    ng.ng_Height	  =    11;
    ng.ng_GadgetText	  =    (UBYTE *)"Check JUMP in bootblock";
    ng.ng_TextAttr	  =    &topaz8;
    ng.ng_GadgetID	  =    GD_BOOTJMP;
    ng.ng_Flags 	  =    PLACETEXT_RIGHT;
    ng.ng_VisualInfo	  =    VisualInfo;
d133 12
a144 1
    g = CreateGadget( CHECKBOX_KIND, g, &ng, GTCB_Checked, TRUE, TAG_DONE );
d146 65
a210 98
    MSHSettingsGadgets[ 0 ] = g;

    ng.ng_TopEdge	  =    offy + 4;
    ng.ng_GadgetText	  =    (UBYTE *)"40 track mode";
    ng.ng_GadgetID	  =    GD_MD40TRACK;

    g = CreateGadget( CHECKBOX_KIND, g, &ng, TAG_DONE );

    MSHSettingsGadgets[ 1 ] = g;

    ng.ng_LeftEdge	  =    offx + 222;
    ng.ng_TopEdge	  =    offy + 46;
    ng.ng_GadgetText	  =    (UBYTE *)"Check bootblock sanity";
    ng.ng_GadgetID	  =    GD_SANITY;

    g = CreateGadget( CHECKBOX_KIND, g, &ng, GTCB_Checked, TRUE, TAG_DONE );

    MSHSettingsGadgets[ 2 ] = g;

    ng.ng_LeftEdge	  =    offx + 238;
    ng.ng_TopEdge	  =    offy + 60;
    ng.ng_GadgetText	  =    (UBYTE *)"Not sane -> defaults";
    ng.ng_GadgetID	  =    GD_SAN_DEFAULT;

    g = CreateGadget( CHECKBOX_KIND, g, &ng, GTCB_Checked, TRUE, TAG_DONE );

    MSHSettingsGadgets[ 3 ] = g;

    ng.ng_LeftEdge	  =    offx + 206;
    ng.ng_TopEdge	  =    offy + 32;
    ng.ng_GadgetText	  =    (UBYTE *)"Always default bootblock";
    ng.ng_GadgetID	  =    GD_USE_DEFAULT;

    g = CreateGadget( CHECKBOX_KIND, g, &ng, TAG_DONE );

    MSHSettingsGadgets[ 4 ] = g;

    ng.ng_LeftEdge	  =    offx + 33;
    ng.ng_TopEdge	  =    offy + 74;
    ng.ng_Width 	  =    121;
    ng.ng_Height	  =    12;
    ng.ng_GadgetText	  =    (UBYTE *)"Default conversion";
    ng.ng_GadgetID	  =    GD_CONVERSION;
    ng.ng_Flags 	  =    PLACETEXT_ABOVE;

    g = CreateGadget( CYCLE_KIND, g, &ng, GTCY_Labels, &CONVERSION0Labels[0], TAG_DONE );

    MSHSettingsGadgets[ 5 ] = g;

    ng.ng_LeftEdge	  =    offx + 171;
    ng.ng_Width 	  =    57;
    ng.ng_GadgetText	  =    (UBYTE *)"Load";
    ng.ng_GadgetID	  =    GD_LOAD;
    ng.ng_Flags 	  =    PLACETEXT_IN;

    g = CreateGadget( BUTTON_KIND, g, &ng, TAG_DONE );

    MSHSettingsGadgets[ 6 ] = g;

    ng.ng_LeftEdge	  =    offx + 16;
    ng.ng_TopEdge	  =    offy + 18;
    ng.ng_Width 	  =    158;
    ng.ng_Height	  =    40;
    ng.ng_GadgetText	  =    (UBYTE *)"Available handlers";
    ng.ng_GadgetID	  =    GD_HANDLERS;
    ng.ng_Flags 	  =    PLACETEXT_ABOVE;

    g = CreateGadget( LISTVIEW_KIND, g, &ng, GTLV_Labels, NULL, GTLV_ShowSelected, NULL, TAG_DONE );

    MSHSettingsGadgets[ 7 ] = g;

    if ( ! g )
	return( 2L );

    if ( ! ( MSHSettingsMenus = CreateMenus( MSHSettingsNewMenu, GTMN_FrontPen, 0L, TAG_DONE )))
	return( 3L );

    LayoutMenus( MSHSettingsMenus, VisualInfo, GTMN_TextAttr, &topaz8, TAG_DONE );

    MSHSettingsZoom[0] = 0;
    MSHSettingsZoom[1] = 0;
    MSHSettingsZoom[2] = 176;
    MSHSettingsZoom[3] = 11;

    if ( ! ( MSHSettingsWnd = OpenWindowTags( NULL,
		    WA_Left,	      MSHSettingsLeft,
		    WA_Top,	      MSHSettingsTop,
		    WA_InnerWidth,    MSHSettingsWidth,
		    WA_InnerHeight,   MSHSettingsHeight,
		    WA_IDCMP,	      IDCMP_MENUPICK|IDCMP_CLOSEWINDOW|IDCMP_DISKINSERTED|IDCMP_DISKREMOVED|IDCMP_REFRESHWINDOW,
		    WA_Flags,	      WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH|WFLG_ACTIVATE,
		    WA_Gadgets,       MSHSettingsGList,
		    WA_Title,	      MSHSettingsWdt,
		    WA_ScreenTitle,   "MSH Settings",
		    WA_PubScreen,     Scr,
		    WA_Zoom,	      MSHSettingsZoom,
		    WA_AutoAdjust,    TRUE,
		    TAG_DONE )))
d213 2
a214 7
    MSHSettingsZoom[0] = MSHSettingsWnd->LeftEdge;
    MSHSettingsZoom[1] = MSHSettingsWnd->TopEdge;
    MSHSettingsZoom[2] = MSHSettingsWnd->Width;
    MSHSettingsZoom[3] = MSHSettingsWnd->Height;

    SetMenuStrip( MSHSettingsWnd, MSHSettingsMenus );
    GT_RefreshWindow( MSHSettingsWnd, NULL );
d216 1
a216 1
    return( 0L );
d221 14
a234 14
    if ( MSHSettingsMenus      ) {
	ClearMenuStrip( MSHSettingsWnd );
	FreeMenus( MSHSettingsMenus );
	MSHSettingsMenus = NULL;    }

    if ( MSHSettingsWnd        ) {
	CloseWindow( MSHSettingsWnd );
	MSHSettingsWnd = NULL;
    }

    if ( MSHSettingsGList      ) {
	FreeGadgets( MSHSettingsGList );
	MSHSettingsGList = NULL;
    }
@


1.53
log
@Initial revision.
@
text
@d23 12
a34 12
struct Screen        *Scr = NULL;
APTR                  VisualInfo = NULL;
struct Window        *MSHSettingsWnd = NULL;
struct Gadget        *MSHSettingsGList = NULL;
struct Menu          *MSHSettingsMenus = NULL;
UWORD                 MSHSettingsZoom[4];
struct Gadget        *MSHSettingsGadgets[8];
UWORD                 MSHSettingsLeft = 10;
UWORD                 MSHSettingsTop = 14;
UWORD                 MSHSettingsWidth = 447;
UWORD                 MSHSettingsHeight = 92;
UBYTE                *MSHSettingsWdt = (UBYTE *)"MSH Settings";
d36 1
a36 1
UBYTE         *CONVERSION0Labels[] = {
d54 1
a54 1
        return( 1L );
d57 1
a57 1
        return( 2L );
d65 2
a66 2
        FreeVisualInfo( VisualInfo );
        VisualInfo = NULL;
d70 2
a71 2
        UnlockPubScreen( NULL, Scr );
        Scr = NULL;
d77 3
a79 3
    struct NewGadget     ng;
    struct Gadget       *g;
    UWORD               offx, offy;
d85 1
a85 1
        return( 1L );
d87 9
a95 9
    ng.ng_LeftEdge        =    offx + 206;
    ng.ng_TopEdge         =    offy + 18;
    ng.ng_Width           =    26;
    ng.ng_Height          =    11;
    ng.ng_GadgetText      =    (UBYTE *)"Check JUMP in bootblock";
    ng.ng_TextAttr        =    &topaz8;
    ng.ng_GadgetID        =    GD_BOOTJMP;
    ng.ng_Flags           =    PLACETEXT_RIGHT;
    ng.ng_VisualInfo      =    VisualInfo;
d101 3
a103 3
    ng.ng_TopEdge         =    offy + 4;
    ng.ng_GadgetText      =    (UBYTE *)"40 track mode";
    ng.ng_GadgetID        =    GD_MD40TRACK;
d109 4
a112 4
    ng.ng_LeftEdge        =    offx + 222;
    ng.ng_TopEdge         =    offy + 46;
    ng.ng_GadgetText      =    (UBYTE *)"Check bootblock sanity";
    ng.ng_GadgetID        =    GD_SANITY;
d118 4
a121 4
    ng.ng_LeftEdge        =    offx + 238;
    ng.ng_TopEdge         =    offy + 60;
    ng.ng_GadgetText      =    (UBYTE *)"Not sane -> defaults";
    ng.ng_GadgetID        =    GD_SAN_DEFAULT;
d127 4
a130 4
    ng.ng_LeftEdge        =    offx + 206;
    ng.ng_TopEdge         =    offy + 32;
    ng.ng_GadgetText      =    (UBYTE *)"Always default bootblock";
    ng.ng_GadgetID        =    GD_USE_DEFAULT;
d136 7
a142 7
    ng.ng_LeftEdge        =    offx + 33;
    ng.ng_TopEdge         =    offy + 74;
    ng.ng_Width           =    121;
    ng.ng_Height          =    12;
    ng.ng_GadgetText      =    (UBYTE *)"Default conversion";
    ng.ng_GadgetID        =    GD_CONVERSION;
    ng.ng_Flags           =    PLACETEXT_ABOVE;
d148 5
a152 5
    ng.ng_LeftEdge        =    offx + 171;
    ng.ng_Width           =    57;
    ng.ng_GadgetText      =    (UBYTE *)"Load";
    ng.ng_GadgetID        =    GD_LOAD;
    ng.ng_Flags           =    PLACETEXT_IN;
d158 7
a164 7
    ng.ng_LeftEdge        =    offx + 16;
    ng.ng_TopEdge         =    offy + 18;
    ng.ng_Width           =    158;
    ng.ng_Height          =    40;
    ng.ng_GadgetText      =    (UBYTE *)"Available handlers";
    ng.ng_GadgetID        =    GD_HANDLERS;
    ng.ng_Flags           =    PLACETEXT_ABOVE;
d171 1
a171 1
        return( 2L );
d174 1
a174 1
        return( 3L );
d184 14
a197 14
                    WA_Left,          MSHSettingsLeft,
                    WA_Top,           MSHSettingsTop,
                    WA_InnerWidth,    MSHSettingsWidth,
                    WA_InnerHeight,   MSHSettingsHeight,
                    WA_IDCMP,         IDCMP_MENUPICK|IDCMP_CLOSEWINDOW|IDCMP_DISKINSERTED|IDCMP_DISKREMOVED|IDCMP_REFRESHWINDOW,
                    WA_Flags,         WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH|WFLG_ACTIVATE,
                    WA_Gadgets,       MSHSettingsGList,
                    WA_Title,         MSHSettingsWdt,
                    WA_ScreenTitle,   "MSH Settings",
                    WA_PubScreen,     Scr,
                    WA_Zoom,          MSHSettingsZoom,
                    WA_AutoAdjust,    TRUE,
                    TAG_DONE )))
        return( 4L );
d213 3
a215 3
        ClearMenuStrip( MSHSettingsWnd );
        FreeMenus( MSHSettingsMenus );
        MSHSettingsMenus = NULL;    }
d218 2
a219 2
        CloseWindow( MSHSettingsWnd );
        MSHSettingsWnd = NULL;
d223 2
a224 2
        FreeGadgets( MSHSettingsGList );
        MSHSettingsGList = NULL;
@
