head	1.55;
access;
symbols
	SHAREWARE2:1.55
	MAXON5:1.55
	MAXON4:1.53;
locks;
comment	@ * @;


1.55
date	93.12.30.23.28.00;	author Rhialto;	state Rel;
branches;
next	1.54;

1.54
date	93.06.24.05.35.45;	author Rhialto;	state Exp;
branches;
next	1.53;

1.53
date	92.10.25.02.47.49;	author Rhialto;	state Rel;
branches;
next	;


desc
@Generated source file for the MSH-Format utility.
@


1.55
log
@Freeze for MAXON5.
New GadToolBox (2.0c), and use font-sensitive option.
@
text
@/*
 *  Source machine generated by GadToolsBox V2.0b
 *  which is (c) Copyright 1991-1993 Jaba Development
 *
 *  GUI Designed by : Olaf 'Rhialto' Seibert
 */

#include <exec/types.h>
#include <intuition/intuition.h>
#include <intuition/classes.h>
#include <intuition/classusr.h>
#include <intuition/imageclass.h>
#include <intuition/gadgetclass.h>
#include <libraries/gadtools.h>
#include <graphics/displayinfo.h>
#include <graphics/gfxbase.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/graphics_protos.h>
#include <clib/utility_protos.h>
#include <string.h>
#include "fmtwindow.h"

struct Screen         *Scr = NULL;
UBYTE                 *PubScreenName = NULL;
APTR                   VisualInfo = NULL;
struct Window         *MainWnd = NULL;
struct Window         *ParmWnd = NULL;
struct Gadget         *MainGList = NULL;
struct Gadget         *ParmGList = NULL;
UWORD                  MainZoom[4];
UWORD                  ParmZoom[4];
struct Gadget         *MainGadgets[5];
struct Gadget         *ParmGadgets[14];
UWORD                  MainLeft = 28;
UWORD                  MainTop = 19;
UWORD                  MainWidth = 420;
UWORD                  MainHeight = 88;
UWORD                  ParmLeft = 11;
UWORD                  ParmTop = 19;
UWORD                  ParmWidth = 522;
UWORD                  ParmHeight = 129;
UBYTE                 *MainWdt = (UBYTE *)"MSH Format";
UBYTE                 *ParmWdt = (UBYTE *)"MSH Format Parameters";
struct TextAttr       *Font, Attr;
UWORD                  FontX, FontY;
UWORD                  OffX, OffY;

UBYTE *FMT_WHAT0Labels[] = {
	(UBYTE *)"Bootblock only",
	(UBYTE *)"Bootblock + root dir",
	(UBYTE *)"Format whole disk",
	NULL };

UWORD MainGTypes[] = {
	LISTVIEW_KIND,
	MX_KIND,
	BUTTON_KIND,
	BUTTON_KIND,
	BUTTON_KIND
};

UWORD ParmGTypes[] = {
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	STRING_KIND,
	BUTTON_KIND
};

struct NewGadget MainNGad[] = {
	13, 18, 174, 64, (UBYTE *)"Format device:", NULL, GD_HANDLERS, PLACETEXT_ABOVE, NULL, NULL,
	211, 7, 17, 9, NULL, NULL, GD_FMT_WHAT, PLACETEXT_RIGHT, NULL, NULL,
	211, 44, 91, 16, (UBYTE *)"Options", NULL, GD_OPTIONS, PLACETEXT_IN, NULL, NULL,
	211, 66, 91, 16, (UBYTE *)"Format", NULL, GD_DOIT, PLACETEXT_IN, NULL, NULL,
	314, 66, 91, 16, (UBYTE *)"Cancel", NULL, GD_CANCEL, PLACETEXT_IN, NULL, NULL
};

struct NewGadget ParmNGad[] = {
	7, 3, 53, 13, (UBYTE *)"Bytes per sector", NULL, GD_BPS, PLACETEXT_RIGHT, NULL, NULL,
	7, 18, 53, 13, (UBYTE *)"Sectors per track", NULL, GD_SPT, PLACETEXT_RIGHT, NULL, NULL,
	7, 33, 53, 13, (UBYTE *)"Number of sides", NULL, GD_NSIDES, PLACETEXT_RIGHT, NULL, NULL,
	7, 48, 53, 13, (UBYTE *)"Starting cylinder", NULL, GD_FIRSTCYL, PLACETEXT_RIGHT, NULL, NULL,
	7, 63, 53, 13, (UBYTE *)"Number of cylinders", NULL, GD_NCYLS, PLACETEXT_RIGHT, NULL, NULL,
	7, 78, 53, 13, (UBYTE *)"Boot sectors", NULL, GD_RESERVED, PLACETEXT_RIGHT, NULL, NULL,
	7, 93, 53, 13, (UBYTE *)"Number of hidden sectors", NULL, GD_NHID, PLACETEXT_RIGHT, NULL, NULL,
	273, 3, 53, 13, (UBYTE *)"Sectors per cluster", NULL, GD_SPC, PLACETEXT_RIGHT, NULL, NULL,
	273, 18, 53, 13, (UBYTE *)"Number of FAT copies", NULL, GD_NFATS, PLACETEXT_RIGHT, NULL, NULL,
	273, 33, 53, 13, (UBYTE *)"Sectors per FAT", NULL, GD_SPF, PLACETEXT_RIGHT, NULL, NULL,
	273, 48, 53, 13, (UBYTE *)"Total number of sectors", NULL, GD_NSECTS, PLACETEXT_RIGHT, NULL, NULL,
	273, 78, 53, 13, (UBYTE *)"Media byte", NULL, GD_MEDIA, PLACETEXT_RIGHT, NULL, NULL,
	273, 93, 53, 13, (UBYTE *)"Root directory entries", NULL, GD_NDIRS, PLACETEXT_RIGHT, NULL, NULL,
	8, 109, 504, 16, (UBYTE *)"OK", NULL, GD_OK, PLACETEXT_IN, NULL, NULL
};

ULONG MainGTags[] = {
	(GTLV_ShowSelected), NULL, (TAG_DONE),
	(GTMX_Labels), (ULONG)&FMT_WHAT0Labels[ 0 ], (GTMX_Spacing), 3, (TAG_DONE),
	(TAG_DONE),
	(TAG_DONE),
	(TAG_DONE)
};

ULONG ParmGTags[] = {
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(GTST_MaxChars), 16, (TAG_DONE),
	(TAG_DONE)
};

static UWORD ComputeX( UWORD value )
{
	return(( UWORD )((( FontX * value ) + 4 ) / 8 ));
}

static UWORD ComputeY( UWORD value )
{
	return(( UWORD )((( FontY * value ) + 4 ) / 8 ));
}

static void ComputeFont( UWORD width, UWORD height )
{
	Font = &Attr;
	Font->ta_Name = (STRPTR)Scr->RastPort.Font->tf_Message.mn_Node.ln_Name;
	Font->ta_YSize = FontY = Scr->RastPort.Font->tf_YSize;
	FontX = Scr->RastPort.Font->tf_XSize;

	OffX = Scr->WBorLeft;
	OffY = Scr->RastPort.TxHeight + Scr->WBorTop + 1;

	if ( width && height ) {
		if (( ComputeX( width ) + OffX + Scr->WBorRight ) > Scr->Width )
			goto UseTopaz;
		if (( ComputeY( height ) + OffY + Scr->WBorBottom ) > Scr->Height )
			goto UseTopaz;
	}
	return;

UseTopaz:
	Font->ta_Name = (STRPTR)"topaz.font";
	FontX = FontY = Font->ta_YSize = 8;
}

int SetupScreen( void )
{
	if ( ! ( Scr = LockPubScreen( PubScreenName )))
		return( 1L );

	ComputeFont( 0, 0 );

	if ( ! ( VisualInfo = GetVisualInfo( Scr, TAG_DONE )))
		return( 2L );

	return( 0L );
}

void CloseDownScreen( void )
{
	if ( VisualInfo ) {
		FreeVisualInfo( VisualInfo );
		VisualInfo = NULL;
	}

	if ( Scr        ) {
		UnlockPubScreen( NULL, Scr );
		Scr = NULL;
	}
}

int OpenMainWindow( void )
{
	struct NewGadget	ng;
	struct Gadget	*g;
	UWORD		lc, tc;
	UWORD		wleft = MainLeft, wtop = MainTop, ww, wh;

	ComputeFont( MainWidth, MainHeight );

	ww = ComputeX( MainWidth );
	wh = ComputeY( MainHeight );

	if (( wleft + ww + OffX + Scr->WBorRight ) > Scr->Width ) wleft = Scr->Width - ww;
	if (( wtop + wh + OffY + Scr->WBorBottom ) > Scr->Height ) wtop = Scr->Height - wh;

	if ( ! ( g = CreateContext( &MainGList )))
		return( 1L );

	for( lc = 0, tc = 0; lc < Main_CNT; lc++ ) {

		CopyMem((char * )&MainNGad[ lc ], (char * )&ng, (long)sizeof( struct NewGadget ));

		ng.ng_VisualInfo = VisualInfo;
		ng.ng_TextAttr   = Font;
		ng.ng_LeftEdge   = OffX + ComputeX( ng.ng_LeftEdge );
		ng.ng_TopEdge    = OffY + ComputeY( ng.ng_TopEdge );
		ng.ng_Width      = ComputeX( ng.ng_Width );
		ng.ng_Height     = ComputeY( ng.ng_Height);

		MainGadgets[ lc ] = g = CreateGadgetA((ULONG)MainGTypes[ lc ], g, &ng, ( struct TagItem * )&MainGTags[ tc ] );

		while( MainGTags[ tc ] ) tc += 2;
		tc++;

		if ( NOT g )
			return( 2L );
	}

	MainZoom[0] = MainLeft;
	MainZoom[1] = MainTop;
	if ( MainWdt )
		MainZoom[2] = TextLength( &Scr->RastPort, (UBYTE *)MainWdt, strlen((char *)MainWdt )) + 80;
	else
		MainZoom[2]  = 80L;
		MainZoom[3] = Scr->WBorTop + Scr->RastPort.TxHeight + 1;

	if ( ! ( MainWnd = OpenWindowTags( NULL,
				WA_Left,	wleft,
				WA_Top,		wtop,
				WA_Width,	ww + OffX + Scr->WBorRight,
				WA_Height,	wh + OffY + Scr->WBorBottom,
				WA_IDCMP,	LISTVIEWIDCMP|MXIDCMP|BUTTONIDCMP|IDCMP_CLOSEWINDOW|IDCMP_REFRESHWINDOW,
				WA_Flags,	WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH,
				WA_Gadgets,	MainGList,
				WA_Title,	MainWdt,
				WA_ScreenTitle,	"MSH Format",
				WA_PubScreen,	Scr,
				WA_Zoom,	MainZoom,
				WA_AutoAdjust,	TRUE,
				TAG_DONE )))
	return( 4L );

	GT_RefreshWindow( MainWnd, NULL );

	return( 0L );
}

void CloseMainWindow( void )
{
	if ( MainWnd        ) {
		CloseWindow( MainWnd );
		MainWnd = NULL;
	}

	if ( MainGList      ) {
		FreeGadgets( MainGList );
		MainGList = NULL;
	}
}

int OpenParmWindow( void )
{
	struct NewGadget	ng;
	struct Gadget	*g;
	UWORD		lc, tc;
	UWORD		wleft = ParmLeft, wtop = ParmTop, ww, wh;

	ComputeFont( ParmWidth, ParmHeight );

	ww = ComputeX( ParmWidth );
	wh = ComputeY( ParmHeight );

	if (( wleft + ww + OffX + Scr->WBorRight ) > Scr->Width ) wleft = Scr->Width - ww;
	if (( wtop + wh + OffY + Scr->WBorBottom ) > Scr->Height ) wtop = Scr->Height - wh;

	if ( ! ( g = CreateContext( &ParmGList )))
		return( 1L );

	for( lc = 0, tc = 0; lc < Parm_CNT; lc++ ) {

		CopyMem((char * )&ParmNGad[ lc ], (char * )&ng, (long)sizeof( struct NewGadget ));

		ng.ng_VisualInfo = VisualInfo;
		ng.ng_TextAttr   = Font;
		ng.ng_LeftEdge   = OffX + ComputeX( ng.ng_LeftEdge );
		ng.ng_TopEdge    = OffY + ComputeY( ng.ng_TopEdge );
		ng.ng_Width      = ComputeX( ng.ng_Width );
		ng.ng_Height     = ComputeY( ng.ng_Height);

		ParmGadgets[ lc ] = g = CreateGadgetA((ULONG)ParmGTypes[ lc ], g, &ng, ( struct TagItem * )&ParmGTags[ tc ] );

		while( ParmGTags[ tc ] ) tc += 2;
		tc++;

		if ( NOT g )
			return( 2L );
	}

	ParmZoom[0] = ParmLeft;
	ParmZoom[1] = ParmTop;
	if ( ParmWdt )
		ParmZoom[2] = TextLength( &Scr->RastPort, (UBYTE *)ParmWdt, strlen((char *)ParmWdt )) + 80;
	else
		ParmZoom[2]  = 80L;
		ParmZoom[3] = Scr->WBorTop + Scr->RastPort.TxHeight + 1;

	if ( ! ( ParmWnd = OpenWindowTags( NULL,
				WA_Left,	wleft,
				WA_Top,		wtop,
				WA_Width,	ww + OffX + Scr->WBorRight,
				WA_Height,	wh + OffY + Scr->WBorBottom,
				WA_IDCMP,	STRINGIDCMP|BUTTONIDCMP|IDCMP_CLOSEWINDOW|IDCMP_REFRESHWINDOW,
				WA_Flags,	WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH,
				WA_Gadgets,	ParmGList,
				WA_Title,	ParmWdt,
				WA_ScreenTitle,	"MSH Format",
				WA_PubScreen,	Scr,
				WA_Zoom,	ParmZoom,
				TAG_DONE )))
	return( 4L );

	GT_RefreshWindow( ParmWnd, NULL );

	return( 0L );
}

void CloseParmWindow( void )
{
	if ( ParmWnd        ) {
		CloseWindow( ParmWnd );
		ParmWnd = NULL;
	}

	if ( ParmGList      ) {
		FreeGadgets( ParmGList );
		ParmGList = NULL;
	}
}

@


1.54
log
@DICE 2.07.54R.
@
text
@d2 4
a5 2
 *  Source generated with GadToolsBox V1.3
 *  which is (c) Copyright 1991,92 Jaba Development
d21 1
d23 107
d131 4
a134 1
#include "fmtwindow.h"
d136 4
a139 26
struct Screen        *Scr = NULL;
APTR                  VisualInfo = NULL;
struct Window        *MainWnd = NULL;
struct Window        *ParmWnd = NULL;
struct Gadget        *MainGList = NULL;
struct Gadget        *ParmGList = NULL;
UWORD                 MainZoom[4];
UWORD                 ParmZoom[4];
struct Gadget        *MainGadgets[5];
struct Gadget        *ParmGadgets[14];
UWORD                 MainLeft = 28;
UWORD                 MainTop = 19;
UWORD                 MainWidth = 420;
UWORD                 MainHeight = 88;
UWORD                 ParmLeft = 11;
UWORD                 ParmTop = 19;
UWORD                 ParmWidth = 522;
UWORD                 ParmHeight = 129;
UBYTE                *MainWdt = (UBYTE *)"MSH Format";
UBYTE                *ParmWdt = (UBYTE *)"MSH Format Parameters";

UBYTE         *FMT_WHAT0Labels[] = {
    (UBYTE *)"Bootblock only",
    (UBYTE *)"Bootblock + root dir",
    (UBYTE *)"Format whole disk",
    NULL };
d141 22
a162 2
struct TextAttr topaz8 = {
    ( STRPTR )"topaz.font", 8, 0x00, 0x01 };
d166 4
a169 2
    if ( ! ( Scr = LockPubScreen( NULL )))
        return( 1L );
d171 2
a172 2
    if ( ! ( VisualInfo = GetVisualInfo( Scr, TAG_DONE )))
        return( 2L );
d174 1
a174 1
    return( 0L );
d179 9
a187 9
    if ( VisualInfo ) {
        FreeVisualInfo( VisualInfo );
        VisualInfo = NULL;
    }

    if ( Scr        ) {
        UnlockPubScreen( NULL, Scr );
        Scr = NULL;
    }
d192 59
a250 89
    struct NewGadget     ng;
    struct Gadget       *g;
    UWORD               offx, offy;

    offx = Scr->WBorLeft;
    offy = Scr->WBorTop + Scr->RastPort.TxHeight + 1;

    if ( ! ( g = CreateContext( &MainGList )))
        return( 1L );

    ng.ng_LeftEdge        =    offx + 12;
    ng.ng_TopEdge         =    offy + 16;
    ng.ng_Width           =    174;
    ng.ng_Height          =    64;
    ng.ng_GadgetText      =    (UBYTE *)"Format device:";
    ng.ng_TextAttr        =    &topaz8;
    ng.ng_GadgetID        =    GD_HANDLERS;
    ng.ng_Flags           =    PLACETEXT_ABOVE;
    ng.ng_VisualInfo      =    VisualInfo;

    g = CreateGadget( LISTVIEW_KIND, g, &ng, GTLV_Labels, NULL, GTLV_ShowSelected, NULL, TAG_DONE );

    MainGadgets[ 0 ] = g;

    ng.ng_LeftEdge        =    offx + 211;
    ng.ng_TopEdge         =    offy + 6;
    ng.ng_GadgetText      =    NULL;
    ng.ng_GadgetID        =    GD_FMT_WHAT;
    ng.ng_Flags           =    PLACETEXT_RIGHT;

    g = CreateGadget( MX_KIND, g, &ng, GTMX_Labels, &FMT_WHAT0Labels[0], GTMX_Spacing, 3, TAG_DONE );

    MainGadgets[ 1 ] = g;

    ng.ng_TopEdge         =    offy + 45;
    ng.ng_Width           =    91;
    ng.ng_Height          =    16;
    ng.ng_GadgetText      =    (UBYTE *)"Options";
    ng.ng_GadgetID        =    GD_OPTIONS;
    ng.ng_Flags           =    PLACETEXT_IN;

    g = CreateGadget( BUTTON_KIND, g, &ng, GA_Disabled, TRUE, TAG_DONE );

    MainGadgets[ 2 ] = g;

    ng.ng_TopEdge         =    offy + 67;
    ng.ng_GadgetText      =    (UBYTE *)"Format";
    ng.ng_GadgetID        =    GD_DOIT;

    g = CreateGadget( BUTTON_KIND, g, &ng, GA_Disabled, TRUE, TAG_DONE );

    MainGadgets[ 3 ] = g;

    ng.ng_LeftEdge        =    offx + 314;
    ng.ng_GadgetText      =    (UBYTE *)"Cancel";
    ng.ng_GadgetID        =    GD_CANCEL;

    g = CreateGadget( BUTTON_KIND, g, &ng, TAG_DONE );

    MainGadgets[ 4 ] = g;

    if ( ! g )
        return( 2L );

    MainZoom[0] = 0;
    MainZoom[1] = 0;
    MainZoom[2] = 168;
    MainZoom[3] = 11;

    if ( ! ( MainWnd = OpenWindowTags( NULL,
                    WA_Left,          MainLeft,
                    WA_Top,           MainTop,
                    WA_InnerWidth,    MainWidth,
                    WA_InnerHeight,   MainHeight,
                    WA_IDCMP,         IDCMP_CLOSEWINDOW|IDCMP_REFRESHWINDOW,
                    WA_Flags,         WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH,
                    WA_Gadgets,       MainGList,
                    WA_Title,         MainWdt,
                    WA_ScreenTitle,   "MSH Format",
                    WA_PubScreen,     Scr,
                    WA_Zoom,          MainZoom,
                    WA_AutoAdjust,    TRUE,
                    TAG_DONE )))
        return( 4L );

    MainZoom[0] = MainWnd->LeftEdge;
    MainZoom[1] = MainWnd->TopEdge;
    MainZoom[2] = MainWnd->Width;
    MainZoom[3] = MainWnd->Height;
d252 1
a252 1
    GT_RefreshWindow( MainWnd, NULL );
d254 1
a254 1
    return( 0L );
d259 9
a267 9
    if ( MainWnd        ) {
        CloseWindow( MainWnd );
        MainWnd = NULL;
    }

    if ( MainGList      ) {
        FreeGadgets( MainGList );
        MainGList = NULL;
    }
d272 58
a329 160
    struct NewGadget     ng;
    struct Gadget       *g;
    UWORD               offx, offy;

    offx = Scr->WBorLeft;
    offy = Scr->WBorTop + Scr->RastPort.TxHeight + 1;

    if ( ! ( g = CreateContext( &ParmGList )))
        return( 1L );

    ng.ng_LeftEdge        =    offx + 7;
    ng.ng_TopEdge         =    offy + 5;
    ng.ng_Width           =    53;
    ng.ng_Height          =    13;
    ng.ng_GadgetText      =    (UBYTE *)"Bytes per sector";
    ng.ng_TextAttr        =    &topaz8;
    ng.ng_GadgetID        =    GD_BPS;
    ng.ng_Flags           =    PLACETEXT_RIGHT;
    ng.ng_VisualInfo      =    VisualInfo;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 0 ] = g;

    ng.ng_TopEdge         =    offy + 20;
    ng.ng_GadgetText      =    (UBYTE *)"Sectors per track";
    ng.ng_GadgetID        =    GD_SPT;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 1 ] = g;

    ng.ng_TopEdge         =    offy + 35;
    ng.ng_GadgetText      =    (UBYTE *)"Number of sides";
    ng.ng_GadgetID        =    GD_NSIDES;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 2 ] = g;

    ng.ng_TopEdge         =    offy + 50;
    ng.ng_GadgetText      =    (UBYTE *)"Starting cylinder";
    ng.ng_GadgetID        =    GD_FIRSTCYL;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 3 ] = g;

    ng.ng_TopEdge         =    offy + 65;
    ng.ng_GadgetText      =    (UBYTE *)"Number of cylinders";
    ng.ng_GadgetID        =    GD_NCYLS;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 4 ] = g;

    ng.ng_TopEdge         =    offy + 80;
    ng.ng_GadgetText      =    (UBYTE *)"Boot sectors";
    ng.ng_GadgetID        =    GD_RESERVED;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 5 ] = g;

    ng.ng_TopEdge         =    offy + 95;
    ng.ng_GadgetText      =    (UBYTE *)"Number of hidden sectors";
    ng.ng_GadgetID        =    GD_NHID;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 6 ] = g;

    ng.ng_LeftEdge        =    offx + 273;
    ng.ng_TopEdge         =    offy + 5;
    ng.ng_GadgetText      =    (UBYTE *)"Sectors per cluster";
    ng.ng_GadgetID        =    GD_SPC;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 7 ] = g;

    ng.ng_TopEdge         =    offy + 20;
    ng.ng_GadgetText      =    (UBYTE *)"Number of FAT copies";
    ng.ng_GadgetID        =    GD_NFATS;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 8 ] = g;

    ng.ng_TopEdge         =    offy + 35;
    ng.ng_GadgetText      =    (UBYTE *)"Sectors per FAT";
    ng.ng_GadgetID        =    GD_SPF;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 9 ] = g;

    ng.ng_TopEdge         =    offy + 50;
    ng.ng_GadgetText      =    (UBYTE *)"Total number of sectors";
    ng.ng_GadgetID        =    GD_NSECTS;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 10 ] = g;

    ng.ng_TopEdge         =    offy + 80;
    ng.ng_GadgetText      =    (UBYTE *)"Media byte";
    ng.ng_GadgetID        =    GD_MEDIA;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 11 ] = g;

    ng.ng_TopEdge         =    offy + 95;
    ng.ng_GadgetText      =    (UBYTE *)"Root directory entries";
    ng.ng_GadgetID        =    GD_NDIRS;

    g = CreateGadget( STRING_KIND, g, &ng, GTST_MaxChars, 16, TAG_DONE );

    ParmGadgets[ 12 ] = g;

    ng.ng_LeftEdge        =    offx + 8;
    ng.ng_TopEdge         =    offy + 111;
    ng.ng_Width           =    504;
    ng.ng_Height          =    16;
    ng.ng_GadgetText      =    (UBYTE *)"OK";
    ng.ng_GadgetID        =    GD_OK;
    ng.ng_Flags           =    PLACETEXT_IN;

    g = CreateGadget( BUTTON_KIND, g, &ng, TAG_DONE );

    ParmGadgets[ 13 ] = g;

    if ( ! g )
        return( 2L );

    ParmZoom[0] = 160;
    ParmZoom[1] = 0;
    ParmZoom[2] = 248;
    ParmZoom[3] = 11;

    if ( ! ( ParmWnd = OpenWindowTags( NULL,
                    WA_Left,          ParmLeft,
                    WA_Top,           ParmTop,
                    WA_InnerWidth,    ParmWidth,
                    WA_InnerHeight,   ParmHeight,
                    WA_IDCMP,         IDCMP_CLOSEWINDOW|IDCMP_REFRESHWINDOW,
                    WA_Flags,         WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_CLOSEGADGET|WFLG_SMART_REFRESH,
                    WA_Gadgets,       ParmGList,
                    WA_Title,         ParmWdt,
                    WA_ScreenTitle,   "MSH Format",
                    WA_PubScreen,     Scr,
                    WA_Zoom,          ParmZoom,
                    TAG_DONE )))
        return( 4L );

    ParmZoom[0] = ParmWnd->LeftEdge;
    ParmZoom[1] = ParmWnd->TopEdge;
    ParmZoom[2] = ParmWnd->Width;
    ParmZoom[3] = ParmWnd->Height;
d331 1
a331 1
    GT_RefreshWindow( ParmWnd, NULL );
d333 1
a333 1
    return( 0L );
d338 9
a346 9
    if ( ParmWnd        ) {
        CloseWindow( ParmWnd );
        ParmWnd = NULL;
    }

    if ( ParmGList      ) {
        FreeGadgets( ParmGList );
        ParmGList = NULL;
    }
@


1.53
log
@Initial revision.
@
text
@@
